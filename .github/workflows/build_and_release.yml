name: "Build wget2.exe"

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/build_and_release.yml'
      - 'build.sh'
  schedule:
    - cron: "0 0 * * *"

jobs:
  build_wget2:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      
      - name: Get Ubuntu codename
        run: |
          # 获取 Ubuntu 版本代号
          CODENAME=$(lsb_release -cs)
          echo "Ubuntu codename: $CODENAME"
          echo "CODENAME=$CODENAME" >> $GITHUB_ENV
      
      - name: Find fastest apt mirror
        run: |
          echo "Testing mirror speeds for Ubuntu $CODENAME..."
          
          # 动态生成镜像URL
          declare -A MIRROR_URLS=(
            ["archive.ubuntu.com"]="http://archive.ubuntu.com/ubuntu/dists/$CODENAME/Release.gpg"
            ["ports.ubuntu.com"]="http://ports.ubuntu.com/ubuntu-ports/dists/$CODENAME/Release.gpg"
            ["security.ubuntu.com"]="http://security.ubuntu.com/ubuntu/dists/$CODENAME-security/Release.gpg"
            ["mirrors.mit.edu"]="http://mirrors.mit.edu/ubuntu/dists/$CODENAME/Release.gpg"
            ["mirror.csclub.uwaterloo.ca"]="http://mirror.csclub.uwaterloo.ca/ubuntu/dists/$CODENAME/Release.gpg"
            ["ubuntu.mirror.ac.za"]="http://ubuntu.mirror.ac.za/ubuntu/dists/$CODENAME/Release.gpg"
            ["ubuntu.mirror.digitalpacific.com.au"]="http://ubuntu.mirror.digitalpacific.com.au/ubuntu/dists/$CODENAME/Release.gpg"
            ["mirror.lagoon.nc"]="http://mirror.lagoon.nc/ubuntu/dists/$CODENAME/Release.gpg"
            ["ubuntu.mirror.rafal.ca"]="http://ubuntu.mirror.rafal.ca/ubuntu/dists/$CODENAME/Release.gpg"
            ["mirrors.coreix.net"]="http://mirrors.coreix.net/ubuntu/dists/$CODENAME/Release.gpg"
            ["mirror.koddos.net"]="http://mirror.koddos.net/ubuntu/dists/$CODENAME/Release.gpg"
            ["ftp.rrze.de"]="http://ftp.rrze.de/ubuntu/dists/$CODENAME/Release.gpg"
            ["mirrors.dotsrc.org"]="http://mirrors.dotsrc.org/ubuntu/dists/$CODENAME/Release.gpg"
            ["mirror.enzu.com"]="http://mirror.enzu.com/ubuntu/dists/$CODENAME/Release.gpg"
            ["mirrors.tencent.com"]="http://mirrors.tencent.com/ubuntu/dists/$CODENAME/Release.gpg"
            ["mirrors.aliyun.com"]="http://mirrors.aliyun.com/ubuntu/dists/$CODENAME/Release.gpg"
            ["mirrors.tuna.tsinghua.edu.cn"]="http://mirrors.tuna.tsinghua.edu.cn/ubuntu/dists/$CODENAME/Release.gpg"
            ["mirrors.ustc.edu.cn"]="http://mirrors.ustc.edu.cn/ubuntu/dists/$CODENAME/Release.gpg"
            ["mirrors.huaweicloud.com"]="http://mirrors.huaweicloud.com/ubuntu/dists/$CODENAME/Release.gpg"
            ["mirrors.bfsu.edu.cn"]="http://mirrors.bfsu.edu.cn/ubuntu/dists/$CODENAME/Release.gpg"
            ["mirrors.sjtug.sjtu.edu.cn"]="http://mirrors.sjtug.sjtu.edu.cn/ubuntu/dists/$CODENAME/Release.gpg"
          )
          
          FASTEST_MIRROR=""
          FASTEST_TIME=999999
          
          for mirror in "${!MIRROR_URLS[@]}"; do
            echo -n "Testing $mirror ... "
            URL="${MIRROR_URLS[$mirror]}"
            
            # 使用timeout确保不会卡住
            START_TIME=$(date +%s%3N)
            if timeout 10s curl --connect-timeout 5 --silent --output /dev/null "$URL"; then
              END_TIME=$(date +%s%3N)
              TIME_MS=$((END_TIME - START_TIME))
              echo "${TIME_MS}ms"
              
              if [ "$TIME_MS" -lt "$FASTEST_TIME" ]; then
                FASTEST_MIRROR="$mirror"
                FASTEST_TIME="$TIME_MS"
              fi
            else
              echo "failed"
            fi
          done
          
          if [ -n "$FASTEST_MIRROR" ]; then
            echo "Fastest mirror: $FASTEST_MIRROR (${FASTEST_TIME}ms)"
            echo "FASTEST_MIRROR=$FASTEST_MIRROR" >> $GITHUB_ENV
          else
            echo "No working mirror found, using default"
            echo "FASTEST_MIRROR=archive.ubuntu.com" >> $GITHUB_ENV
          fi
      
      - name: Configure apt sources
        run: |
          echo "Configuring apt to use fastest mirror: $FASTEST_MIRROR"
          # 备份原配置
          sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup
          
          # 替换为最快镜像
          sudo sed -i "s|http://[a-z]*\.ubuntu\.com/ubuntu|http://$FASTEST_MIRROR/ubuntu|g" /etc/apt/sources.list
          sudo sed -i "s|http://security\.ubuntu\.com/ubuntu|http://$FASTEST_MIRROR/ubuntu|g" /etc/apt/sources.list
          
          echo "Updated apt sources:"
          grep "^deb " /etc/apt/sources.list
      
      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -y
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            wget curl git ca-certificates bash \
            autopoint autoconf automake libtool gettext texinfo flex lzip \
            mingw-w64 pkg-config-mingw-w64-x86-64 \
            python3-venv meson ninja-build cmake \
            bc lld zstd
      
      - name: Compile
        env:
          CROSS_HOST: "x86_64-w64-mingw32"
        run: |
          chmod +x "${GITHUB_WORKSPACE}/build.sh"
          "${GITHUB_WORKSPACE}/build.sh"
      
      - name: Archive wget2.exe
        uses: actions/upload-artifact@v5
        with:
          name: wget2.exe
          path: "wget2.exe"
      
      - name: Get version number
        run: |
          VERSION=$(wget -qO- https://raw.githubusercontent.com/rockdaboot/wget2/master/NEWS | grep -oP '\bRelease v\K[\d.]+' | head -n 1)
          echo "wget2_VERSION=${VERSION}" >> $GITHUB_ENV
      
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: wget2-v${{ env.wget2_VERSION }}
          allowUpdates: true
          artifacts: "wget2.exe"
          bodyFile: "README.md"
          token: ${{ secrets.GITHUB_TOKEN }}
